plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id "org.gradlex.extra-java-module-info"  version "1.8"
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.project'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    flatDir(dirs: 'lib/jdt-language-server-1.37.0-202406271335/plugins')
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false

    module('org.eclipse.lsp4j.jsonrpc_0.22.0.v20240213-2011.jar', 'org.eclipse.lsp4j.jsonrpc') {
        requires('com.google.gson')
        requires('java.logging')
        exportAllPackages()
    }
    module('org.eclipse.lsp4j_0.22.0.v20240213-2011.jar', 'org.eclipse.lsp4j') {
        requires('org.eclipse.lsp4j.jsonrpc')
        requires('com.google.gson')
        exportAllPackages()
    }
}

ext {
    junitVersion = '5.10.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.project.javaeditor'
    mainClass = 'com.project.javaeditor.Application'
}

javafx {
    version = '22.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation(fileTree(dir: 'lib/jdt-language-server-1.37.0-202406271335/plugins', includes: [
            'org.eclipse.lsp4j.jsonrpc_0.22.0.v20240213-2011.jar',
            'org.eclipse.lsp4j_0.22.0.v20240213-2011.jar',
            'com.google.gson_2.10.1.v20230109-0753.jar'
    ]))
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.23.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.23.1'
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.11.3'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${getLayout().getBuildDirectory()}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

